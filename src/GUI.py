# -*- coding: utf-8 -*-
import os
# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import multiprocessing
import subprocess
import sys
import time

import xlwt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize, Qt, pyqtSignal, QMutex
from PyQt5.QtWidgets import QMainWindow, QWidget, QApplication, QDialog
from PyQt5.QtGui import QPalette, QBrush, QPixmap, QImage, QTextCursor

from src import main
from src.Spider.TiebaThread import TiebaThread
from src.main import save_replies_excel


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1720, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 4, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem1, 1, 4, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(13)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.label_7.setObjectName("label_7")
        self.gridLayout_3.addWidget(self.label_7, 5, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem2, 0, 1, 4, 1)
        self.te_logger = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.te_logger.sizePolicy().hasHeightForWidth())
        self.te_logger.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(8)
        self.te_logger.setFont(font)
        self.te_logger.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                     "border-radius:5px;")
        self.te_logger.setReadOnly(True)
        self.te_logger.setObjectName("te_logger")
        self.gridLayout_3.addWidget(self.te_logger, 6, 0, 1, 3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.rb_useCurrent = QtWidgets.QRadioButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rb_useCurrent.sizePolicy().hasHeightForWidth())
        self.rb_useCurrent.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.rb_useCurrent.setFont(font)
        self.rb_useCurrent.setObjectName("rb_useCurrent")
        self.horizontalLayout.addWidget(self.rb_useCurrent)
        spacerItem3 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.rb_useNew = QtWidgets.QRadioButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rb_useNew.sizePolicy().hasHeightForWidth())
        self.rb_useNew.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.rb_useNew.setFont(font)
        self.rb_useNew.setObjectName("rb_useNew")
        self.horizontalLayout.addWidget(self.rb_useNew)
        self.gridLayout_3.addLayout(self.horizontalLayout, 0, 2, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.progress_spider = QtWidgets.QProgressBar(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progress_spider.sizePolicy().hasHeightForWidth())
        self.progress_spider.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.progress_spider.setFont(font)
        self.progress_spider.setStyleSheet("QProgressBar {\n"
                                           "    border:4px solid rgb(205, 205, 205);\n"
                                           "    border-radius:5px;\n"
                                           "    background-color: #FFFFFF;\n"
                                           "    text-align: center;\n"
                                           "}")
        self.progress_spider.setProperty("value", 0)
        self.progress_spider.setObjectName("progress_spider")
        self.horizontalLayout_2.addWidget(self.progress_spider)
        spacerItem4 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        """开始数据获取"""
        self.pb_startSpider = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pb_startSpider.sizePolicy().hasHeightForWidth())
        self.pb_startSpider.setSizePolicy(sizePolicy)
        self.pb_startSpider.setMinimumSize(QtCore.QSize(108, 33))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.pb_startSpider.setFont(font)
        self.pb_startSpider.setStyleSheet("  QPushButton {\n"
                                          "    border:4px solid rgb(205, 205, 205);\n"
                                          "    border-radius:5px;\n"
                                          "      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                          "                                        stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
                                          "      min-width: 100px\n"
                                          "  }\n"
                                          "\n"
                                          "  QPushButton:pressed {\n"
                                          "      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                          "                                        stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
                                          "  }\n"
                                          "\n"
                                          "  QPushButton:flat {\n"
                                          "      border: none; /* no border for a flat push button */\n"
                                          "  }\n"
                                          "\n"
                                          "  QPushButton:default {\n"
                                          "      border-color: navy; /* make the default button prominent */\n"
                                          "  }")
        self.pb_startSpider.setObjectName("pb_startSpider")
        self.horizontalLayout_2.addWidget(self.pb_startSpider)
        self.gridLayout_3.addLayout(self.horizontalLayout_2, 8, 0, 1, 3)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout_3.addWidget(self.label_4, 2, 0, 1, 1)
        self.sb_amount = QtWidgets.QSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sb_amount.sizePolicy().hasHeightForWidth())
        self.sb_amount.setSizePolicy(sizePolicy)
        self.sb_amount.setMinimumSize(QtCore.QSize(200, 0))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.sb_amount.setFont(font)
        self.sb_amount.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                     "border-radius:5px;")
        self.sb_amount.setObjectName("sb_amount")
        self.gridLayout_3.addWidget(self.sb_amount, 3, 2, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_3.addItem(spacerItem5, 7, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout_3.addWidget(self.label_6, 3, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout_3.addWidget(self.label_3, 0, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_3.addItem(spacerItem6, 1, 0, 1, 1)
        self.le_targetName = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.le_targetName.sizePolicy().hasHeightForWidth())
        self.le_targetName.setSizePolicy(sizePolicy)
        self.le_targetName.setMinimumSize(QtCore.QSize(200, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.le_targetName.setFont(font)
        self.le_targetName.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                         "border-radius:5px;")
        self.le_targetName.setClearButtonEnabled(True)
        self.le_targetName.setObjectName("le_targetName")
        self.gridLayout_3.addWidget(self.le_targetName, 2, 2, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_3.addItem(spacerItem7, 4, 0, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_3, 2, 0, 1, 1)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                "border-radius:5px;")
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(10)
        self.line.setMidLineWidth(10)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.line, 0, 2, 3, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.gridLayout_4.addWidget(self.label_13, 3, 2, 1, 1)
        self.la_emotionWave = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.la_emotionWave.setFont(font)
        self.la_emotionWave.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                          "border-radius:5px;")
        self.la_emotionWave.setAlignment(QtCore.Qt.AlignCenter)
        self.la_emotionWave.setObjectName("la_emotionWave")
        self.gridLayout_4.addWidget(self.la_emotionWave, 4, 2, 1, 1)
        self.la_replyTime = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.la_replyTime.setFont(font)
        self.la_replyTime.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                        "border-radius:5px;")
        self.la_replyTime.setAlignment(QtCore.Qt.AlignCenter)
        self.la_replyTime.setObjectName("la_replyTime")
        self.gridLayout_4.addWidget(self.la_replyTime, 4, 4, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout_4.addWidget(self.label_8, 0, 0, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.gridLayout_4.addWidget(self.label_16, 3, 4, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem8)
        self.progress_analyse = QtWidgets.QProgressBar(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.progress_analyse.setFont(font)
        self.progress_analyse.setStyleSheet("QProgressBar {\n"
                                            "    border:4px solid rgb(205, 205, 205);\n"
                                            "    border-radius:5px;\n"
                                            "    background-color: #FFFFFF;\n"
                                            "    text-align: center;\n"
                                            "}")
        self.progress_analyse.setProperty("value", 0)
        self.progress_analyse.setObjectName("progress_analyse")
        self.horizontalLayout_3.addWidget(self.progress_analyse)
        spacerItem9 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem9)
        """开始分析数据按钮"""
        self.pb_startAnalyse = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pb_startAnalyse.sizePolicy().hasHeightForWidth())
        self.pb_startAnalyse.setSizePolicy(sizePolicy)
        self.pb_startAnalyse.setMinimumSize(QtCore.QSize(108, 33))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.pb_startAnalyse.setFont(font)
        self.pb_startAnalyse.setStyleSheet("  QPushButton {\n"
                                           "    border:4px solid rgb(205, 205, 205);\n"
                                           "    border-radius:5px;\n"
                                           "      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                           "                                        stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
                                           "      min-width: 100px\n"
                                           "  }\n"
                                           "\n"
                                           "  QPushButton:pressed {\n"
                                           "      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                           "                                        stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
                                           "  }\n"
                                           "\n"
                                           "  QPushButton:flat {\n"
                                           "      border: none; /* no border for a flat push button */\n"
                                           "  }\n"
                                           "\n"
                                           "  QPushButton:default {\n"
                                           "      border-color: navy; /* make the default button prominent */\n"
                                           "  }")
        self.pb_startAnalyse.setObjectName("pb_startAnalyse")
        self.horizontalLayout_3.addWidget(self.pb_startAnalyse)
        spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem10)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(108, 33))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("  QPushButton {\n"
                                      "    border:4px solid rgb(205, 205, 205);\n"
                                      "    border-radius:5px;\n"
                                      "      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                      "                                        stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
                                      "      min-width: 100px\n"
                                      "  }\n"
                                      "\n"
                                      "  QPushButton:pressed {\n"
                                      "      background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                      "                                        stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
                                      "  }\n"
                                      "\n"
                                      "  QPushButton:flat {\n"
                                      "      border: none; /* no border for a flat push button */\n"
                                      "  }\n"
                                      "\n"
                                      "  QPushButton:default {\n"
                                      "      border-color: navy; /* make the default button prominent */\n"
                                      "  }")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem11)
        self.gridLayout_4.addLayout(self.horizontalLayout_3, 6, 0, 1, 5)
        spacerItem12 = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem12, 1, 1, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.gridLayout_4.addWidget(self.label_10, 0, 2, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem13, 1, 3, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.gridLayout_4.addWidget(self.label_15, 0, 4, 1, 1)
        self.la_replyCount = QtWidgets.QLabel(self.centralwidget)
        self.la_replyCount.setMinimumSize(QtCore.QSize(360, 0))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.la_replyCount.setFont(font)
        self.la_replyCount.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                         "border-radius:5px;")
        self.la_replyCount.setAlignment(QtCore.Qt.AlignCenter)
        self.la_replyCount.setObjectName("la_replyCount")
        self.gridLayout_4.addWidget(self.la_replyCount, 1, 4, 1, 1)
        self.la_emotionAnalyse = QtWidgets.QLabel(self.centralwidget)
        self.la_emotionAnalyse.setMinimumSize(QtCore.QSize(360, 0))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.la_emotionAnalyse.setFont(font)
        self.la_emotionAnalyse.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                             "border-radius:5px;")
        self.la_emotionAnalyse.setAlignment(QtCore.Qt.AlignCenter)
        self.la_emotionAnalyse.setObjectName("la_emotionAnalyse")
        self.gridLayout_4.addWidget(self.la_emotionAnalyse, 1, 2, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_4.addItem(spacerItem14, 2, 2, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_4.addItem(spacerItem15, 5, 0, 1, 5)
        self.la_cloud = QtWidgets.QLabel(self.centralwidget)
        self.la_cloud.setMinimumSize(QtCore.QSize(400, 0))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.la_cloud.setFont(font)
        self.la_cloud.setStyleSheet("border:4px solid rgb(205, 205, 205);\n"
                                    "border-radius:5px;")
        self.la_cloud.setAlignment(QtCore.Qt.AlignCenter)
        self.la_cloud.setObjectName("la_cloud")
        self.gridLayout_4.addWidget(self.la_cloud, 1, 0, 4, 1)
        self.gridLayout.addLayout(self.gridLayout_4, 2, 4, 1, 1)
        spacerItem16 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem16, 0, 1, 3, 1)
        spacerItem17 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem17, 0, 3, 3, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 3, 1, 1, 1)
        spacerItem18 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem18, 3, 0, 1, 1)
        spacerItem19 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem19, 3, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 1, 0, 1, 3)
        spacerItem20 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem20, 2, 0, 1, 3)
        spacerItem21 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem21, 0, 0, 1, 3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "数据分析"))
        self.label.setText(_translate("MainWindow", "数据获取"))
        self.label_7.setText(_translate("MainWindow", "爬取日志"))
        self.te_logger.setHtml(_translate("MainWindow",
                                          "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                          "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                          "p, li { white-space: pre-wrap; }\n"
                                          "</style></head><body style=\" font-family:\'黑体\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
                                          "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:10pt;\"><br /></p></body></html>"))
        self.rb_useCurrent.setText(_translate("MainWindow", "使用现有数据"))
        self.rb_useNew.setText(_translate("MainWindow", "实时爬取数据"))
        """开始数据获取"""
        self.pb_startSpider.setText(_translate("MainWindow", "开始数据获取"))
        self.label_4.setText(_translate("MainWindow", "目标贴吧"))
        self.label_6.setText(_translate("MainWindow", "爬取数量"))
        self.label_3.setText(_translate("MainWindow", "数据来源"))
        self.label_13.setText(_translate("MainWindow", "情感波动"))
        self.la_emotionWave.setText(_translate("MainWindow", "[点击下方数据分析以生成]"))
        self.la_replyTime.setText(_translate("MainWindow", "[点击下方数据分析以生成]"))
        self.label_8.setText(_translate("MainWindow", "词云展示"))
        self.label_16.setText(_translate("MainWindow", "发帖回复时间"))
        self.pb_startAnalyse.setText(_translate("MainWindow", "     开始数据分析     "))
        self.pushButton.setText(_translate("MainWindow", "   打开输出文件路径   "))
        self.label_10.setText(_translate("MainWindow", "情感分析"))
        self.label_15.setText(_translate("MainWindow", "回复数量统计"))
        self.la_replyCount.setText(_translate("MainWindow", "[点击下方数据分析以生成]"))
        self.la_emotionAnalyse.setText(_translate("MainWindow", "[点击下方数据分析以生成]"))
        self.la_cloud.setText(_translate("MainWindow", "[点击下方数据分析以生成]"))
        self.label_5.setText(_translate("MainWindow", "贴吧发言评论数据化分析"))


class MainWindow(QtWidgets.QMainWindow,Ui_MainWindow):

    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)
        self.work_thread = None
        self.mutex_spider = QMutex()
        self.mutex_analyse = QMutex()

        self.rb_useCurrent.setChecked(True)
        """开始数据获取的槽函数"""
        self.pb_startSpider.clicked.connect(self.on_startSpider_clicked)
        """开始分析的槽函数"""
        self.pb_startAnalyse.clicked.connect(self.on_startAnalyse_clicked)
        self.pushButton.clicked.connect(
            lambda: os.system('explorer.exe "{}"'.format(os.getcwd()))
        )
        sys.stdout = Signal()
        sys.stdout.text_update.connect(self.slot_logger)

    def load_image(self, path, qlabel):
        img = QImage(path)
        if img is None or img.width() * img.height() <= 0:
            qlabel.setText('[统计数据生成失败]')
            return
        ratio = (qlabel.width() - 30) / img.width()
        newWidth = int(ratio * img.width())
        newHeight = int(ratio * img.height())
        size = QSize(newWidth, newHeight)
        pixImg = QPixmap.fromImage(img.scaled(size, Qt.IgnoreAspectRatio))
        qlabel.resize(newWidth, newHeight)
        qlabel.setPixmap(pixImg)

    """开始数据获取槽函数"""
    def on_startSpider_clicked(self):
        print(QtCore.QThread.currentThread())
        # 正确的
        self.work_thread = WorkThread(0, self.mutex_spider)
        self.work_thread.signal_progress.connect(self.slot_progress)
        self.work_thread.signal_done.connect(self.slot_done)
        self.work_thread.set_tieba(self.le_targetName.text())
        self.work_thread.start()
        # 错误的
        # work_thread = WorkThread(0, self.mutex_spider)
        # work_thread.start()
    """开始分析函数"""
    def on_startAnalyse_clicked(self):
        print(QtCore.QThread.currentThread())
        self.work_thread = WorkThread(1, self.mutex_analyse)
        self.work_thread.signal_progress.connect(self.slot_progress)
        self.work_thread.signal_done.connect(self.slot_done)
        self.work_thread.start()

    def slot_progress(self, index, progress):
        if index == 0:
            self.progress_spider.setValue(progress)
        elif index == 1:
            self.progress_analyse.setValue(progress)

    def slot_logger(self, text):
        cursor = self.te_logger.textCursor()
        cursor.movePosition(QTextCursor.End)
        self.te_logger.append(text)
        self.te_logger.setTextCursor(cursor)

    def slot_done(self, index):
        if index == 0:
            self.pb_startAnalyse.click()
        elif index == 1:
            self.load_image('词云.jpg', self.la_cloud)
            self.load_image('情感占比分布.jpg', self.la_emotionAnalyse)
            self.load_image('情感波动图.jpg', self.la_emotionWave)
            self.load_image('情感波动图.jpg', self.la_emotionWave)
            self.load_image('回复日期与具体时间散点图.jpg', self.la_replyTime)
            self.load_image('帖子回复数统计.jpg', self.la_replyCount)

# 工作线程
class WorkThread(QtCore.QThread):
    signal_log = pyqtSignal(str)
    signal_progress = pyqtSignal(int, int)
    signal_done = pyqtSignal(int)

    def __init__(self, index, mutex):
        super().__init__()
        self.index = index
        self.mutex = mutex
        self.tieba = ''
        print('init', self.currentThread())

    def __del__(self):
        self.wait()

    def run(self):
        i = 0
        if self.index == 0:
            self.mutex.lock()
            self.execute_spider()
            self.signal_done.emit(0)
            self.mutex.unlock()
        elif self.index == 1:
            self.mutex.lock()
            self.execute_analyse()
            self.signal_done.emit(1)
            self.mutex.unlock()

    def set_tieba(self, text):
        self.tieba = text

    def execute_spider(self):
        total_threads = main.spider_init(self.tieba)
        length = len(total_threads)
        cur_page = 0
        book = xlwt.Workbook(encoding='utf-8', style_compression=0)
        tot = 0
        cnt_for_percent = 1
        for p in total_threads:
            tot = tot + len(p[(2 if cur_page == 1 else 0):])
        fileName = 'TiebaData.txt'
        with open(fileName, 'w', encoding='utf-8') as file:
            for p in total_threads:
                cur_page += 1
                cnt = 0
                for t in p[(2 if cur_page == 1 else 0):]:
                    cnt = cnt + 1
                    print('-' * 40 + '\n' + t[0][1])
                    time.sleep(2)
                    self.signal_progress.emit(0, int(100 / tot) * cnt_for_percent)
                    cnt_for_percent = cnt_for_percent + 1
                    new_thread = TiebaThread(t[0][0], t[0][1])
                    new_thread.retrieve_thread()
                    new_thread.save_thread()

                    rep = new_thread.get_replies()
                    all_time = new_thread.save_message_time()
                    # print(f'all_time -> {all_time}')
                    print(f'all_title -> {t[0][1]}')
                    # print(f'all_replies -> {rep}')

                    save_replies_excel(t[0][1], all_time, rep, book, cnt)
                    file.write("楼主:" + "\n" + t[0][1] + "\n")
                    file.write("评论:" + "\n")
                    for i in range(len(rep)):
                        file.write(rep[i]+"\n")

                    # # print(new_thread.get_segments())
                    # # print(new_thread.get_key_words())

            time.sleep(0.5)
            self.signal_progress.emit(0, 100)

    def execute_analyse(self):

        self.signal_progress.emit(1, 12)
        p = subprocess.Popen(
            str(sys.executable) + " main.py --op=1",
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT
        )
        while p.poll() is None:
            line = p.stdout.readline().strip()
            if line is not None and len(line) > 0:
                print(main.decode_data(line))
        # main.draw_cloud()

        self.signal_progress.emit(1, 29)
        p = subprocess.Popen(
            str(sys.executable) + " main.py --op=2",
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT
            )
        while p.poll() is None:
            line = p.stdout.readline().strip()
            if line is not None and len(line) > 0:
                print(main.decode_data(line))
        # main.emotion()
        self.signal_progress.emit(1, 40)
        main.print_similarities()
        self.signal_progress.emit(1, 53)
        all_time, all_title, all_replies = main.read_excel("../excel/ex.xls")
        self.signal_progress.emit(1, 66)
        print()
        p = subprocess.Popen(
            str(sys.executable) + " main.py --op=3",
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT
        )
        while p.poll() is None:
            line = p.stdout.readline().strip()
            if line is not None and len(line) > 0:
                print(main.decode_data(line))
        # main.analyze_reply_count(all_time, all_title, all_replies)
        self.signal_progress.emit(1, 82)
        p = subprocess.Popen(
            str(sys.executable) + " main.py --op=4",
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT
        )
        while p.poll() is None:
            line = p.stdout.readline().strip()
            if line is not None and len(line) > 0:
                print(main.decode_data(line))
        # main.analyze_post_time()
        self.signal_progress.emit(1, 100)


# 重定向控制台输出
class Signal(QtCore.QObject):
    text_update = pyqtSignal(str)

    def write(self, text):
        self.text_update.emit(str(text))
        QApplication.processEvents()


if __name__ == '__main__':

    app = QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    sys.exit(app.exec_())
